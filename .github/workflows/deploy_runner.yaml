name: Run Playwright Runner Installation

#on:
#  workflow_dispatch:
#    inputs:
#      pipeline_branch:
#        description: 'Test pipeline branch name'
#        type: string
#        required: true
#        default: 'main'

on:
  push:
    branches-ignore:
      - "**release*"
      - "prettier/**"
      - "dependabot/**"
    paths-ignore:
      - "docs/**"
      - "README.md"
      - ".github/**"
  workflow_dispatch: {}
  pull_request:
    branches: [main]
    types:
      [opened, reopened, synchronize]

permissions: {}


jobs:
  Clean_Install_Environments:
    runs-on: ubuntu-latest
    name: Clean Install
    steps:
      - name: Get current workflow branch
        id: get_branch
        run: |
      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: 'main'
          repository: 'Netcracker/qubership-test-pipelines'
          path: 'qubership-test-pipelines'
      - name: Create Kubernetes Cluster
        uses: ./qubership-test-pipelines/actions/shared/create_cluster

      - name: Checkout pipeline
        uses: actions/checkout@v4
        with:
          ref: 'main'
          repository: 'kagw95/qubership-consul'
          path: 'qubership-consul'

      - name: Listing downloaded files
        run: |
          pwd
          ls -R ./

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.32.0'

#      - name: Setup Helm
#        uses: azure/setup-helm@v3

      - name: Verify tools
        run: |
          kubectl version --client
          helm version
          kubectl create ns playwright-runner
          kubectl get namespaces

      - name: Install Consul
        run: |
          echo  "Namespace to install: consul-ns" 
          helm install --namespace=consul-ns --create-namespace -f ./qubership-consul/charts/helm/consul-service/values.yaml consul-service ./qubership-consul/charts/helm/consul-service

      - name: Check Consul Status
        shell: bash
        run: |
          sleep 30s
          kubectl get pods -n consul-ns
          pod=$(kubectl get pods -n consul-ns -o name | grep -vE 'consul-' | head -n 1 | cut -d/ -f2)
          kubectl wait pod "$pod" -n consul-ns \
          --for=condition=Ready \
          --timeout=600s || {
          echo "❌ Pod $pod did not become ready in time"
          exit 1
          }

#      - name: Checkout Code
#        uses: actions/checkout@v4
#
#      - name: Install Playwright Runner
#        run: |
#          ls -l
#          helm install --namespace=playwright-runner --create-namespace -f ./deployments/charts/atp3-playwright-runner/values.yaml -f ./deployments/charts/atp3-playwright-runner/resource-profiles/dev.yaml atp3-playwright-runner ./deployments/charts/atp3-playwright-runner --set DOCKER_TAG="ghcr.io/netcracker/qubership-testing-platform-playwright-runner:build_process_latest"
#
#      - name: Get docker images
#        shell: bash
#        run: |
#          echo "▶️ Checking pods in namespace playwright-runner"
#          sleep 15s
#
#          kubectl get pods -n playwright-runner
#
#          echo "Docker images:"
#          kubectl get pods -n playwright-runner -o go-template --template="{{range .items}}{{range .spec.containers}}{{.image}} {{end}}{{end}}"
#          echo
#
#          echo "Waiting for pod to complete..."
#          timeout=600
#          start_time=$(date +%s)
#
#          pod=$(kubectl get pods -n playwright-runner --no-headers -o custom-columns=":metadata.name" | grep -vE '^playwright-runner' | head -n 1)
#          echo "Tracking pod: $pod"
#
#          while true; do
#            phase=$(kubectl get pod "$pod" -n playwright-runner -o jsonpath='{.status.phase}' 2>/dev/null || echo "Unknown")
#
#            if [[ "$phase" == "Succeeded" ]]; then
#              echo "✅ Pod $pod succeeded"
#              exit 0
#            elif [[ "$phase" == "Failed" ]]; then
#              echo "❌ Pod $pod failed"
#              kubectl logs "$pod" -n playwright-runner --tail=50 || true
#              exit 1
#            fi
#
#            now=$(date +%s)
#            elapsed=$(( now - start_time ))
#            if (( elapsed > timeout )); then
#              echo "❌ Timeout waiting for pod $pod to succeed after ${timeout}s"
#              kubectl logs "$pod" -n playwright-runner --tail=50 || true
#              exit 1
#            fi
#
#            echo "⏳ Pod phase: $phase (elapsed: ${elapsed}s)"
#            sleep 15
#          done
